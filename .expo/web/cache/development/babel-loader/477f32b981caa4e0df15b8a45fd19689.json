{"ast":null,"code":"import React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport View from \"react-native-web/dist/exports/View\";\n\nvar SlidingBorder = function SlidingBorder(_ref) {\n  var scrollX = _ref.scrollX,\n      data = _ref.data,\n      dotSize = _ref.dotSize,\n      containerStyle = _ref.containerStyle,\n      dotStyle = _ref.dotStyle,\n      dotContainerStyle = _ref.dotContainerStyle,\n      slidingIndicatorStyle = _ref.slidingIndicatorStyle,\n      borderPadding = _ref.borderPadding;\n\n  var _useWindowDimensions = useWindowDimensions(),\n      width = _useWindowDimensions.width;\n\n  var defaultProps = {\n    dotSize: dotSize || 24,\n    borderPadding: borderPadding || -5\n  };\n  var inputRange = [-width, 0, width];\n  var translateX = scrollX.interpolate({\n    inputRange: inputRange,\n    outputRange: [-defaultProps.dotSize + defaultProps.borderPadding, 0, defaultProps.dotSize + defaultProps.borderPadding]\n  });\n  return React.createElement(View, {\n    style: [{\n      height: defaultProps.dotSize\n    }, styles.container, containerStyle]\n  }, React.createElement(Animated.View, {\n    style: [{\n      width: defaultProps.dotSize + defaultProps.borderPadding,\n      height: defaultProps.dotSize + defaultProps.borderPadding,\n      borderRadius: (defaultProps.dotSize + defaultProps.borderPadding) / 2\n    }, styles.slidingIndicatorStyle, {\n      position: 'absolute',\n      transform: [{\n        translateX: translateX\n      }]\n    }, slidingIndicatorStyle]\n  }), data.map(function (_item, index) {\n    return React.createElement(View, {\n      key: index,\n      style: [{\n        width: defaultProps.dotSize + defaultProps.borderPadding\n      }, styles.dotContainerStyle, dotContainerStyle]\n    }, React.createElement(View, {\n      style: [{\n        width: defaultProps.dotSize / 2,\n        height: defaultProps.dotSize / 2,\n        borderRadius: defaultProps.dotSize / 4\n      }, styles.dotStyle, dotStyle]\n    }));\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    bottom: 20,\n    flexDirection: 'row',\n    alignSelf: 'center'\n  },\n  dotStyle: {\n    backgroundColor: '#347af0'\n  },\n  dotContainerStyle: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  slidingIndicatorStyle: {\n    borderWidth: 1,\n    borderColor: '#347af0',\n    alignItems: 'center',\n    justifyContent: 'center',\n    alignSelf: 'center'\n  }\n});\nexport default SlidingBorder;","map":{"version":3,"sources":["SlidingBorder.tsx"],"names":["SlidingBorder","borderPadding","width","useWindowDimensions","defaultProps","dotSize","inputRange","translateX","outputRange","height","styles","borderRadius","position","transform","container","bottom","flexDirection","alignSelf","dotStyle","backgroundColor","dotContainerStyle","alignItems","justifyContent","slidingIndicatorStyle","borderWidth","borderColor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  useWindowDimensions,\n  View,\n  ViewStyle,\n} from 'react-native';\nexport interface SlidingBorderProps {\n  data: Array<Object>;\n  scrollX: Animated.Value;\n  dotSize?: number;\n  borderPadding?: number;\n  containerStyle?: ViewStyle;\n  dotStyle?: ViewStyle;\n  dotContainerStyle?: ViewStyle;\n  slidingIndicatorStyle?: ViewStyle;\n}\n\nconst SlidingBorder = ({\n  scrollX,\n  data,\n  dotSize,\n  containerStyle,\n  dotStyle,\n  dotContainerStyle,\n  slidingIndicatorStyle,\n  borderPadding,\n}: SlidingBorderProps) => {\n  const { width } = useWindowDimensions();\n\n  const defaultProps = {\n    dotSize: dotSize || 24,\n    borderPadding: borderPadding || -5,\n  };\n  const inputRange = [-width, 0, width];\n  const translateX = scrollX.interpolate({\n    inputRange,\n    outputRange: [\n      -defaultProps.dotSize + defaultProps.borderPadding,\n      0,\n      defaultProps.dotSize + defaultProps.borderPadding,\n    ],\n  });\n\n  return (\n    <View\n      style={[\n        { height: defaultProps.dotSize },\n        styles.container,\n        containerStyle,\n      ]}\n    >\n      <Animated.View\n        style={[\n          {\n            width: defaultProps.dotSize + defaultProps.borderPadding,\n            height: defaultProps.dotSize + defaultProps.borderPadding,\n            borderRadius:\n              (defaultProps.dotSize + defaultProps.borderPadding) / 2,\n          },\n          styles.slidingIndicatorStyle,\n          // eslint-disable-next-line react-native/no-inline-styles\n          {\n            position: 'absolute',\n            transform: [{ translateX }],\n          },\n          slidingIndicatorStyle,\n        ]}\n      />\n      {data.map((_item, index) => {\n        return (\n          <View\n            key={index}\n            style={[\n              {\n                width: defaultProps.dotSize + defaultProps.borderPadding,\n              },\n              styles.dotContainerStyle,\n              dotContainerStyle,\n            ]}\n          >\n            <View\n              style={[\n                {\n                  width: defaultProps.dotSize / 2,\n                  height: defaultProps.dotSize / 2,\n                  borderRadius: defaultProps.dotSize / 4,\n                },\n                styles.dotStyle,\n                dotStyle,\n              ]}\n            />\n          </View>\n        );\n      })}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    bottom: 20,\n    flexDirection: 'row',\n    alignSelf: 'center',\n  },\n  dotStyle: {\n    backgroundColor: '#347af0',\n  },\n  dotContainerStyle: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  slidingIndicatorStyle: {\n    borderWidth: 1,\n    borderColor: '#347af0',\n    alignItems: 'center',\n    justifyContent: 'center',\n    alignSelf: 'center',\n  },\n});\n\nexport default SlidingBorder;\n"]},"metadata":{},"sourceType":"module"}