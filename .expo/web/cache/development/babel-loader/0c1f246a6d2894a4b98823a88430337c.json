{"ast":null,"code":"import React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Line, Svg } from 'react-native-svg';\nvar AnimatedLine = Animated.createAnimatedComponent(Line);\nvar AnimatedSvg = Animated.createAnimatedComponent(Svg);\n\nvar LiquidLike = function LiquidLike(_ref) {\n  var scrollX = _ref.scrollX,\n      data = _ref.data,\n      dotSize = _ref.dotSize,\n      marginHorizontal = _ref.marginHorizontal,\n      inActiveDotOpacity = _ref.inActiveDotOpacity,\n      inActiveDotColor = _ref.inActiveDotColor,\n      activeDotColor = _ref.activeDotColor,\n      containerStyle = _ref.containerStyle,\n      scrollOffset = _ref.scrollOffset,\n      wormDot = _ref.wormDot,\n      bigHead = _ref.bigHead,\n      strokeWidth = _ref.strokeWidth,\n      bigHeadScale = _ref.bigHeadScale;\n\n  var _useWindowDimensions = useWindowDimensions(),\n      width = _useWindowDimensions.width;\n\n  var defaultProps = {\n    dotSize: dotSize || 12,\n    marginHorizontal: marginHorizontal || 6,\n    inActiveDotOpacity: inActiveDotOpacity || 0.5,\n    inActiveDotColor: inActiveDotColor || '#000',\n    activeDotColor: activeDotColor || '#fff',\n    wormDot: wormDot || false,\n    bigHead: bigHead || false,\n    strokeWidth: strokeWidth || 8,\n    bigHeadScale: bigHeadScale || 1\n  };\n  var inputRange = [0, width, width * 2];\n  var translateBack = React.useRef(new Animated.Value(0)).current;\n  Animated.timing(translateBack, {\n    toValue: scrollOffset.interpolate({\n      inputRange: [0, width],\n      outputRange: [defaultProps.dotSize / 2, defaultProps.dotSize + defaultProps.marginHorizontal + (defaultProps.marginHorizontal + defaultProps.dotSize / 2)]\n    }),\n    duration: 100,\n    useNativeDriver: true\n  }).start();\n  var translateFront = scrollX.interpolate({\n    inputRange: inputRange,\n    outputRange: [defaultProps.dotSize / 2, defaultProps.dotSize + defaultProps.marginHorizontal * 2 + defaultProps.dotSize / 2, (defaultProps.dotSize + defaultProps.marginHorizontal * 2) * 2 + defaultProps.dotSize / 2]\n  });\n  return React.createElement(View, {\n    style: [styles.containerStyle, containerStyle]\n  }, data.map(function (_item, index) {\n    return React.createElement(View, {\n      key: index,\n      style: {\n        opacity: defaultProps.inActiveDotOpacity,\n        width: defaultProps.dotSize,\n        height: defaultProps.dotSize,\n        borderRadius: defaultProps.dotSize / 2,\n        marginHorizontal: defaultProps.marginHorizontal,\n        backgroundColor: defaultProps.inActiveDotColor\n      }\n    });\n  }), !wormDot ? React.createElement(Animated.View, {\n    style: [{\n      width: defaultProps.dotSize,\n      height: defaultProps.dotSize,\n      marginHorizontal: defaultProps.marginHorizontal,\n      backgroundColor: defaultProps.activeDotColor,\n      borderRadius: defaultProps.dotSize\n    }, styles.svg, {\n      transform: [{\n        translateX: scrollX.interpolate({\n          inputRange: inputRange,\n          outputRange: [0, defaultProps.dotSize + defaultProps.marginHorizontal * 2, (defaultProps.dotSize + defaultProps.marginHorizontal * 2) * 2]\n        })\n      }, !bigHead ? {\n        scale: Animated.modulo(Animated.modulo(Animated.divide(scrollX, width), width), 1).interpolate({\n          inputRange: [0, 0.1, 0.9, 1],\n          outputRange: [1, 0, 0, 1]\n        })\n      } : {\n        scale: defaultProps.bigHeadScale\n      }]\n    }]\n  }) : null, React.createElement(AnimatedSvg, {\n    style: styles.svg\n  }, React.createElement(AnimatedLine, {\n    x1: translateFront,\n    y1: defaultProps.dotSize / 2,\n    x2: translateBack,\n    y2: defaultProps.dotSize / 2,\n    stroke: defaultProps.activeDotColor,\n    strokeWidth: defaultProps.strokeWidth,\n    strokeLinecap: \"round\",\n    translateX: defaultProps.marginHorizontal\n  })));\n};\n\nvar styles = StyleSheet.create({\n  containerStyle: {\n    flexDirection: 'row'\n  },\n  svg: {\n    position: 'absolute'\n  }\n});\nexport default LiquidLike;","map":{"version":3,"sources":["LiquidLike.tsx"],"names":["AnimatedLine","Animated","AnimatedSvg","LiquidLike","bigHeadScale","width","useWindowDimensions","defaultProps","dotSize","marginHorizontal","inActiveDotOpacity","inActiveDotColor","activeDotColor","wormDot","bigHead","strokeWidth","inputRange","translateBack","React","toValue","outputRange","duration","useNativeDriver","translateFront","styles","opacity","height","borderRadius","backgroundColor","transform","translateX","scale","svg","containerStyle","flexDirection","position"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  useWindowDimensions,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport { Line, Svg } from 'react-native-svg';\nexport interface LiquidLikeProps {\n  data: Array<Object>;\n  scrollX: Animated.Value;\n  scrollOffset: Animated.Value;\n  containerStyle?: ViewStyle;\n  dotSize?: number;\n  marginHorizontal?: number;\n  inActiveDotOpacity?: number;\n  inActiveDotColor?: string;\n  activeDotColor?: string;\n  wormDot?: boolean;\n  strokeWidth?: number;\n  bigHead?: boolean;\n  bigHeadScale?: number;\n}\n\nconst AnimatedLine = Animated.createAnimatedComponent(Line);\nconst AnimatedSvg = Animated.createAnimatedComponent(Svg);\nconst LiquidLike = ({\n  scrollX,\n  data,\n  dotSize,\n  marginHorizontal,\n  inActiveDotOpacity,\n  inActiveDotColor,\n  activeDotColor,\n  containerStyle,\n  scrollOffset,\n  wormDot,\n  bigHead,\n  strokeWidth,\n  bigHeadScale,\n}: LiquidLikeProps) => {\n  const { width } = useWindowDimensions();\n\n  const defaultProps = {\n    dotSize: dotSize || 12,\n    marginHorizontal: marginHorizontal || 6,\n    inActiveDotOpacity: inActiveDotOpacity || 0.5,\n    inActiveDotColor: inActiveDotColor || '#000',\n    activeDotColor: activeDotColor || '#fff',\n    wormDot: wormDot || false,\n    bigHead: bigHead || false,\n    strokeWidth: strokeWidth || 8,\n    bigHeadScale: bigHeadScale || 1,\n  };\n  const inputRange = [0, width, width * 2];\n  const translateBack = React.useRef(new Animated.Value(0)).current;\n  Animated.timing(translateBack, {\n    toValue: scrollOffset.interpolate({\n      inputRange: [0, width],\n      outputRange: [\n        defaultProps.dotSize / 2,\n        defaultProps.dotSize +\n          defaultProps.marginHorizontal +\n          (defaultProps.marginHorizontal + defaultProps.dotSize / 2),\n      ],\n    }),\n    duration: 100,\n    useNativeDriver: true,\n  }).start();\n  const translateFront = scrollX.interpolate({\n    inputRange,\n    outputRange: [\n      defaultProps.dotSize / 2,\n      defaultProps.dotSize +\n        defaultProps.marginHorizontal * 2 +\n        defaultProps.dotSize / 2,\n      (defaultProps.dotSize + defaultProps.marginHorizontal * 2) * 2 +\n        defaultProps.dotSize / 2,\n    ],\n  });\n  return (\n    <View style={[styles.containerStyle, containerStyle]}>\n      {data.map((_item, index) => {\n        return (\n          <View\n            key={index}\n            style={{\n              opacity: defaultProps.inActiveDotOpacity,\n              width: defaultProps.dotSize,\n              height: defaultProps.dotSize,\n              borderRadius: defaultProps.dotSize / 2,\n              marginHorizontal: defaultProps.marginHorizontal,\n              backgroundColor: defaultProps.inActiveDotColor,\n            }}\n          />\n        );\n      })}\n      {!wormDot ? (\n        <Animated.View\n          style={[\n            {\n              width: defaultProps.dotSize,\n              height: defaultProps.dotSize,\n              marginHorizontal: defaultProps.marginHorizontal,\n              backgroundColor: defaultProps.activeDotColor,\n              borderRadius: defaultProps.dotSize,\n            },\n            styles.svg,\n            {\n              transform: [\n                {\n                  translateX: scrollX.interpolate({\n                    inputRange,\n                    outputRange: [\n                      0,\n                      defaultProps.dotSize + defaultProps.marginHorizontal * 2,\n                      (defaultProps.dotSize +\n                        defaultProps.marginHorizontal * 2) *\n                        2,\n                    ],\n                  }),\n                },\n                !bigHead\n                  ? {\n                      scale: Animated.modulo(\n                        Animated.modulo(Animated.divide(scrollX, width), width),\n                        1\n                      ).interpolate({\n                        inputRange: [0, 0.1, 0.9, 1],\n                        outputRange: [1, 0, 0, 1],\n                      }),\n                    }\n                  : {\n                      scale: defaultProps.bigHeadScale,\n                    },\n              ],\n            },\n          ]}\n        />\n      ) : null}\n\n      <AnimatedSvg style={styles.svg}>\n        <AnimatedLine\n          x1={translateFront}\n          y1={defaultProps.dotSize / 2}\n          x2={translateBack}\n          y2={defaultProps.dotSize / 2}\n          stroke={defaultProps.activeDotColor}\n          strokeWidth={defaultProps.strokeWidth}\n          strokeLinecap=\"round\"\n          translateX={defaultProps.marginHorizontal}\n        />\n      </AnimatedSvg>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  containerStyle: {\n    flexDirection: 'row',\n  },\n  svg: {\n    position: 'absolute',\n  },\n});\n\nexport default LiquidLike;\n"]},"metadata":{},"sourceType":"module"}