{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/Bhavesh/Developer/AI_CAMP/ai-on-thumbs/screens/Try.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Background from \"../components/Background\";\nimport Logo from \"../components/Logo\";\nimport Header from \"../components/Header\";\nimport FootPrint from \"../components/FootPrint\";\nimport ActionButton from \"../components/ActionButton\";\nimport { AntDesign } from '@expo/vector-icons';\nimport { Camera } from 'expo-camera';\nimport Toast from \"../components/Toast\";\nimport * as FileSystem from 'expo-file-system';\n\nvar axios = require(\"axios\");\n\nimport * as MediaLibrary from 'expo-media-library';\nimport * as Permissions from 'expo-permissions';\nexport default function Try(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(Camera.Constants.Type.back),\n      _useState4 = _slicedToArray(_useState3, 2),\n      type = _useState4[0],\n      setType = _useState4[1];\n\n  var _useState5 = useState({\n    value: '',\n    type: ''\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      toast = _useState6[0],\n      setToast = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      startCamera = _useState8[0],\n      setStartCamera = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      capturedImage = _useState10[0],\n      setCapturedImage = _useState10[1];\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      imageBase64 = _useState12[0],\n      setImageBase64 = _useState12[1];\n\n  var camera = useRef(null);\n\n  var _useState13 = useState(true),\n      _useState14 = _slicedToArray(_useState13, 2),\n      loading = _useState14[0],\n      setLoading = _useState14[1];\n\n  var onUpload = function onUpload(text) {\n    var data;\n    return _regeneratorRuntime.async(function onUpload$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(sendFaceRequest(text));\n\n          case 2:\n            data = _context.sent;\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var sendFaceRequest = function sendFaceRequest(image_string) {\n    var params, url;\n    return _regeneratorRuntime.async(function sendFaceRequest$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            params = {\n              \"base_64\": \"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\"\n            };\n            console.log(image_string);\n            url = \"https://rohanjoshi2.herokuapp.com/image\";\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(axios.post(url, params, {\n              \"headers\": {\n                \"content-type\": \"application/json\"\n              }\n            }).then(function (response) {\n              console.log(\"JSON PARSED\");\n              setImageBase64(JSON.parse(response.config.data).base_64);\n            }).catch(function (error) {\n              console.log(error);\n            }));\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Camera$request, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(Camera.requestPermissionsAsync());\n\n            case 2:\n              _await$Camera$request = _context3.sent;\n              status = _await$Camera$request.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  useEffect(function () {\n    (function _callee2() {\n      var base64;\n      return _regeneratorRuntime.async(function _callee2$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              setLoading(true);\n\n              if (!(capturedImage && capturedImage.uri)) {\n                _context4.next = 7;\n                break;\n              }\n\n              _context4.next = 4;\n              return _regeneratorRuntime.awrap(FileSystem.readAsStringAsync(capturedImage.uri, {\n                encoding: 'base64'\n              }));\n\n            case 4:\n              base64 = _context4.sent;\n              _context4.next = 7;\n              return _regeneratorRuntime.awrap(onUpload(base64));\n\n            case 7:\n              setLoading(false);\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, [capturedImage]);\n\n  if (hasPermission === null) {\n    return React.createElement(Background, {\n      style: {\n        justifyContent: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 16\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 62\n      }\n    }));\n  }\n\n  function openCamera() {\n    setStartCamera(true);\n  }\n\n  function takePhoto() {\n    var photo;\n    return _regeneratorRuntime.async(function takePhoto$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (camera.current) {\n              _context5.next = 2;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", null);\n\n          case 2:\n            _context5.next = 4;\n            return _regeneratorRuntime.awrap(camera.current.takePictureAsync());\n\n          case 4:\n            photo = _context5.sent;\n            setCapturedImage(photo);\n            setStartCamera(false);\n\n          case 7:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  if (startCamera) {\n    return React.createElement(Camera, {\n      style: {\n        flex: 1,\n        width: \"100%\",\n        alignItems: \"center\",\n        justifyContent: \"flex-end\"\n      },\n      ref: function ref(r) {\n        camera.current = r;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 16\n      }\n    }, React.createElement(ActionButton, {\n      style: {\n        marginBottom: 30\n      },\n      onPress: function _callee3() {\n        return _regeneratorRuntime.async(function _callee3$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return _regeneratorRuntime.awrap(takePhoto());\n\n              case 2:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      title: \"Take Photo\",\n      icon: React.createElement(AntDesign, {\n        name: \"camera\",\n        style: {\n          marginLeft: 5\n        },\n        size: 30,\n        color: \"black\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 121\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  return React.createElement(Background, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, React.createElement(Header, {\n    style: [styles.left_align],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, \"Try it out!\"), React.createElement(FootPrint, {\n    style: styles.left_align,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, \"Use your own product in real life!\"), React.createElement(ActionButton, {\n    style: {\n      marginTop: 20\n    },\n    onPress: function onPress() {\n      return hasPermission ? openCamera() : setToast({\n        type: 'error',\n        message: \"Go to settings to enable the camera.\"\n      });\n    },\n    title: \"Open Camera\",\n    icon: React.createElement(AntDesign, {\n      name: \"camera\",\n      style: {\n        marginLeft: 5\n      },\n      size: 30,\n      color: \"black\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 189\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }), loading ? React.createElement(ActivityIndicator, {\n    style: {\n      marginTop: 100\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 19\n    }\n  }) : imageBase64 ? React.createElement(View, {\n    style: styles.imageContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 10\n    }\n  }, React.createElement(Image, {\n    style: {\n      width: 300,\n      height: 400,\n      marginTop: 10\n    },\n    source: {\n      uri: \"data:image/png;base64,\" + imageBase64\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  })) : null, React.createElement(View, {\n    style: styles.buttonView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, React.createElement(ActionButton, {\n    onPress: function onPress() {\n      return navigation.navigate(\"Ad\");\n    },\n    title: \"Done\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  })), React.createElement(Toast, _extends({}, toast, {\n    onDismiss: function onDismiss() {\n      return setToast({\n        value: '',\n        type: toast.type\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  left_align: {\n    alignSelf: \"flex-start\",\n    marginLeft: 10,\n    marginVertical: 5\n  },\n  logo: {\n    marginVertical: 50\n  },\n  buttonView: {\n    flex: 1,\n    width: \"100%\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\"\n  },\n  imageContainer: {\n    margin: 30,\n    flex: 1,\n    width: '100%',\n    alignItems: \"center\"\n  }\n});","map":{"version":3,"sources":["/Users/Bhavesh/Developer/AI_CAMP/ai-on-thumbs/screens/Try.js"],"names":["React","useEffect","useState","useRef","Background","Logo","Header","FootPrint","ActionButton","AntDesign","Camera","Toast","FileSystem","axios","require","MediaLibrary","Permissions","Try","navigation","hasPermission","setHasPermission","Constants","Type","back","type","setType","value","toast","setToast","startCamera","setStartCamera","capturedImage","setCapturedImage","imageBase64","setImageBase64","camera","loading","setLoading","onUpload","text","sendFaceRequest","data","image_string","params","console","log","url","post","then","response","JSON","parse","config","base_64","catch","error","requestPermissionsAsync","status","uri","readAsStringAsync","encoding","base64","justifyContent","openCamera","takePhoto","current","takePictureAsync","photo","flex","width","alignItems","r","marginBottom","marginLeft","styles","left_align","marginTop","message","imageContainer","height","buttonView","navigate","StyleSheet","create","alignSelf","marginVertical","logo","margin"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useRef} from 'react';\nimport { StyleSheet, Text, View, ActivityIndicator, Image } from 'react-native';\nimport Background from '../components/Background';\nimport Logo from '../components/Logo';\nimport Header from '../components/Header';\nimport FootPrint from '../components/FootPrint';\nimport ActionButton from \"../components/ActionButton\";\nimport { AntDesign } from '@expo/vector-icons';\nimport { Camera } from 'expo-camera';\nimport Toast from '../components/Toast';\nimport * as FileSystem from 'expo-file-system';\nconst axios = require(\"axios\");\nimport * as MediaLibrary from 'expo-media-library';\nimport * as Permissions from 'expo-permissions';\nexport default function Try({navigation}) {\n  const [hasPermission, setHasPermission] = useState(null);\n  const [type, setType] = useState(Camera.Constants.Type.back);\n  const [toast, setToast] = useState({ value: '', type: '' })\n  const [startCamera,setStartCamera] = useState(false);\n  const [capturedImage, setCapturedImage] = useState(null);\n  const [imageBase64, setImageBase64] = useState(null);\n  const camera = useRef(null)\n  const [loading, setLoading] = useState(true);\n  const onUpload = async (text) => {\n    const data = await sendFaceRequest(text)\n    //\n    //console.log(data)\n  }\n\n  const sendFaceRequest = async (image_string) => {\n    const params = {\n        \"base_64\": \"\"\n    }\n    console.log(image_string)\n    let url = \"https://rohanjoshi2.herokuapp.com/image\"\n    await axios.post(url, params,{\n\n      \"headers\": {\n      \n      \"content-type\": \"application/json\",\n      \n      },\n      \n      })\n      .then(function(response) {\n      console.log(\"JSON PARSED\")\n      setImageBase64(JSON.parse(response.config.data).base_64);\n      }).catch(function(error) {\n      \n        console.log(error);\n      \n      });\n  }\n  useEffect(() => {\n        (async () => {\n        const { status } = await Camera.requestPermissionsAsync();\n        setHasPermission(status === 'granted');\n        })();\n    }, []);\n    useEffect(() => {\n        (async () => {\n            setLoading(true)\n            if(capturedImage && capturedImage.uri){\n                const base64 = await FileSystem.readAsStringAsync(capturedImage.uri, { encoding: 'base64' });\n                await onUpload(base64);\n            }\n            setLoading(false);\n        })();\n    }, [capturedImage]);\n\n    if (hasPermission === null) {\n        return <Background style={{justifyContent:\"center\"}}><ActivityIndicator size={100}/></Background>;\n    }\n    function openCamera(){\n        setStartCamera(true)\n    }\n    async function takePhoto(){\n            if (!camera.current){ \n            return null;\n        }\n            const photo = await camera.current.takePictureAsync();\n            setCapturedImage(photo);\n            setStartCamera(false);\n    }\n    if(startCamera){\n        return(<Camera\n        style={{flex: 1,width:\"100%\", alignItems:\"center\", justifyContent:\"flex-end\"}}\n        ref={(r) => {\n        camera.current = r\n        }}\n        >\n            <ActionButton style={{marginBottom:30}} onPress={async ()=> {await takePhoto()}} title={\"Take Photo\"} icon={<AntDesign name=\"camera\" style={{marginLeft:5}} size={30} color=\"black\" />}/>\n        </Camera>)\n    }\n  return (\n    <Background>\n        <Header style= {[styles.left_align]}>Try it out!</Header>\n        <FootPrint style={styles.left_align}>Use your own product in real life!</FootPrint>\n        <ActionButton style={{marginTop:20}} onPress={()=>hasPermission?openCamera():setToast({ type: 'error', message: \"Go to settings to enable the camera.\"})} title=\"Open Camera\" icon={<AntDesign name=\"camera\" style={{marginLeft:5}} size={30} color=\"black\" />}/>\n         {loading?<ActivityIndicator style={{marginTop:100,}}/>:imageBase64?\n         <View style={styles.imageContainer}>\n            <Image style={{width: 300, height: 400, marginTop:10}} source={{uri: `data:image/png;base64,${imageBase64}`}}/>\n        </View>:null}\n        \n        <View style={styles.buttonView}>\n            <ActionButton onPress={()=>navigation.navigate(\"Ad\")} title=\"Done\"/>\n        </View>\n        <Toast {...toast} onDismiss={() => setToast({ value: '', type: toast.type })} />\n    </Background>\n  );\n}\n\nconst styles = StyleSheet.create({\n    left_align:{\n        alignSelf:\"flex-start\",\n        marginLeft:10,\n        marginVertical:5,\n    },\n    logo:{\n      marginVertical: 50,\n    },\n    buttonView:{\n        flex:1,\n        width:\"100%\",\n        justifyContent:\"flex-end\",\n        alignItems:\"center\"\n    },\n    imageContainer:{\n        margin:30,\n        flex:1,\n        width:'100%',\n        alignItems:\"center\",\n    }\n});\n"]},"metadata":{},"sourceType":"module"}