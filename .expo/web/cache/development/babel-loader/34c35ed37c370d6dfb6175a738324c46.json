{"ast":null,"code":"import React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport View from \"react-native-web/dist/exports/View\";\n\nvar ExpandingDot = function ExpandingDot(_ref) {\n  var scrollX = _ref.scrollX,\n      data = _ref.data,\n      dotStyle = _ref.dotStyle,\n      containerStyle = _ref.containerStyle,\n      inActiveDotOpacity = _ref.inActiveDotOpacity,\n      inActiveDotColor = _ref.inActiveDotColor,\n      expandingDotWidth = _ref.expandingDotWidth,\n      activeDotColor = _ref.activeDotColor;\n\n  var _useWindowDimensions = useWindowDimensions(),\n      width = _useWindowDimensions.width;\n\n  var defaultProps = {\n    inActiveDotColor: inActiveDotColor || '#000',\n    inActiveDotOpacity: inActiveDotOpacity || 0.5,\n    expandingDotWidth: expandingDotWidth || 20,\n    dotWidth: dotStyle.width || 10,\n    activeDotColor: activeDotColor || '#347af0'\n  };\n  return React.createElement(View, {\n    style: [styles.containerStyle, containerStyle]\n  }, data.map(function (_, index) {\n    var inputRange = [(index - 1) * width, index * width, (index + 1) * width];\n    var colour = scrollX.interpolate({\n      inputRange: inputRange,\n      outputRange: [defaultProps.inActiveDotColor, defaultProps.activeDotColor, defaultProps.inActiveDotColor],\n      extrapolate: 'clamp'\n    });\n    var opacity = scrollX.interpolate({\n      inputRange: inputRange,\n      outputRange: [defaultProps.inActiveDotOpacity, 1, defaultProps.inActiveDotOpacity],\n      extrapolate: 'clamp'\n    });\n    var expand = scrollX.interpolate({\n      inputRange: inputRange,\n      outputRange: [defaultProps.dotWidth, defaultProps.expandingDotWidth, defaultProps.dotWidth],\n      extrapolate: 'clamp'\n    });\n    return React.createElement(Animated.View, {\n      key: \"dot-\".concat(index),\n      style: [styles.dotStyle, dotStyle, {\n        width: expand\n      }, {\n        opacity: opacity\n      }, {\n        backgroundColor: colour\n      }]\n    });\n  }));\n};\n\nvar styles = StyleSheet.create({\n  containerStyle: {\n    position: 'absolute',\n    bottom: 20,\n    flexDirection: 'row',\n    alignSelf: 'center'\n  },\n  dotStyle: {\n    width: 10,\n    height: 10,\n    borderRadius: 5,\n    marginHorizontal: 5\n  }\n});\nexport default ExpandingDot;","map":{"version":3,"sources":["ExpandingDot.tsx"],"names":["ExpandingDot","activeDotColor","width","useWindowDimensions","defaultProps","inActiveDotColor","inActiveDotOpacity","expandingDotWidth","dotWidth","dotStyle","styles","inputRange","index","colour","outputRange","extrapolate","opacity","expand","backgroundColor","containerStyle","position","bottom","flexDirection","alignSelf","height","borderRadius","marginHorizontal"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  useWindowDimensions,\n  View,\n  ViewStyle,\n} from 'react-native';\nexport interface ExpandingDotProps {\n  data: Array<Object>;\n  scrollX: Animated.Value;\n  containerStyle: ViewStyle;\n  dotStyle: ViewStyle;\n  inActiveDotOpacity?: number;\n  inActiveDotColor?: string;\n  expandingDotWidth?: number;\n  activeDotColor?: string;\n}\n\nconst ExpandingDot = ({\n  scrollX,\n  data,\n  dotStyle,\n  containerStyle,\n  inActiveDotOpacity,\n  inActiveDotColor,\n  expandingDotWidth,\n  activeDotColor,\n}: ExpandingDotProps) => {\n  const { width } = useWindowDimensions();\n\n  const defaultProps = {\n    inActiveDotColor: inActiveDotColor || '#000',\n    inActiveDotOpacity: inActiveDotOpacity || 0.5,\n    expandingDotWidth: expandingDotWidth || 20,\n    dotWidth: (dotStyle.width as number) || 10,\n    activeDotColor: activeDotColor || '#347af0',\n  };\n\n  return (\n    <View style={[styles.containerStyle, containerStyle]}>\n      {data.map((_, index) => {\n        const inputRange = [\n          (index - 1) * width,\n          index * width,\n          (index + 1) * width,\n        ];\n\n        const colour = scrollX.interpolate({\n          inputRange,\n          outputRange: [\n            defaultProps.inActiveDotColor,\n            defaultProps.activeDotColor,\n            defaultProps.inActiveDotColor,\n          ],\n          extrapolate: 'clamp',\n        });\n        const opacity = scrollX.interpolate({\n          inputRange,\n          outputRange: [\n            defaultProps.inActiveDotOpacity,\n            1,\n            defaultProps.inActiveDotOpacity,\n          ],\n          extrapolate: 'clamp',\n        });\n        const expand = scrollX.interpolate({\n          inputRange,\n          outputRange: [\n            defaultProps.dotWidth,\n            defaultProps.expandingDotWidth,\n            defaultProps.dotWidth,\n          ],\n          extrapolate: 'clamp',\n        });\n\n        return (\n          <Animated.View\n            key={`dot-${index}`}\n            style={[\n              styles.dotStyle,\n              dotStyle,\n              { width: expand },\n              { opacity },\n              { backgroundColor: colour },\n            ]}\n          />\n        );\n      })}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  containerStyle: {\n    position: 'absolute',\n    bottom: 20,\n    flexDirection: 'row',\n    alignSelf: 'center',\n  },\n  dotStyle: {\n    width: 10,\n    height: 10,\n    borderRadius: 5,\n    marginHorizontal: 5,\n  },\n});\n\nexport default ExpandingDot;\n"]},"metadata":{},"sourceType":"module"}